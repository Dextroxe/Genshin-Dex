"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnkaNetwork = void 0;
const axios_1 = require("axios");
const index_1 = require("./models/index");
const node_cache_1 = __importDefault(require("node-cache"));
class EnkaNetwork {
    constructor(data) {
        this.language = data.language || "EN";
        this.request = new axios_1.Axios({
            baseURL: "https://enka.network",
            headers: {
                Accept: "application/json",
                "User-Agent": "enkaNetwork@1.1.1",
            },
        });
        this.cache =
            data.caching !== false
                ? new node_cache_1.default({ checkperiod: 40 })
                : undefined;
    }
    /**
     * Fetch user by uid from the game.
     * @param {number} uid `UID` from the game.
     * @param {string} language The language to be used in the localization of names (characters, artifacts, etc.). Default is EnkaNetwork.language.
     */
    async fetchUser(uid, language = "EN") {
        var _a;
        let cache = (_a = this.cache) === null || _a === void 0 ? void 0 : _a.get(`uid-${uid}-${language || this.language}`);
        if (cache)
            return cache;
        return this.request
            .get(`/u/${uid}/__data.json`)
            .then((response) => JSON.parse(response.data))
            .then((data) => {
            var _a;
            const res = new index_1.FetchUserUID(language || this.language, data);
            (_a = this.cache) === null || _a === void 0 ? void 0 : _a.set(`uid-${uid}-${language || this.language}`, res, res.ttl);
            return res;
        });
    }
    async fetchProfile(profileTag, language) {
        return this.request
            .get(`/u/${profileTag}/__data.json`)
            .then((response) => JSON.parse(response.data))
            .then((data) => new index_1.FetchUserProfile(language || this.language, data));
    }
    async fetchAccounts(tag, language) {
        return this.request
            .get(`/api/profile/${tag}/hoyos/`)
            .then((response) => JSON.parse(response.data))
            .then((data) => data.map((account) => {
            return {
                is_uid_public: account.is_uid_public,
                player: new index_1.PlayerInfo(language || this.language, account.player_info),
            };
        }));
    }
}
exports.EnkaNetwork = EnkaNetwork;
